{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\noteSystemManagement\\\\frontend\\\\src\\\\components\\\\Register.js\",\n  _s = $RefreshSig$();\nimport { useRef, useState, useEffect } from \"react\";\nimport { faCheck, faTimes, faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport axios from '../api/axios'; // Import the Axios instance with the correct base URL\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst user_regex = /^[A-z][A-z0-9-_]{3,23}$/;\n/*[a-zA-Z] - This character class represents a single character that can be any uppercase or lowercase letter of the English alphabet.\r\n[a-zA-Z0-9-] - This character class represents a single character that can be an uppercase or lowercase letter of the English alphabet, a digit (0-9), an underscore (), or a hyphen (-).\r\n\r\nString that starts with a single letter (uppercase or lowercase), followed by a single character that can be a letter (uppercase or lowercase), a digit, an underscore, or a hyphen. The total length of the string should be between 4 and 24 characters.*/\n\nconst pass_regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\n/*?= is a positive lookahead, a type of zero-width assertion. captured match must be followed by whatever is within the parentheses but that part isn't captured.\r\n\r\n(?=.*[a-z]) - It ensures that the string contains at least one lowercase letter (a-z).\r\n\r\n(?=.*[A-Z]) - It ensures that the string contains at least one uppercase letter (A-Z).\r\n\r\n(?=.*[0-9]) -Ensures that the string contains at least one digit (0-9).\r\n\r\n(?=.*[!@#$%]) -Ensures that the string contains at least one special character from the set [!@#$%].*/\n\nconst REGISTER_URL = 'http://localhost:5000/register';\n//end point backend api\n\nconst Register = () => {\n  _s();\n  const userRef = useRef(); /*focus user input*/\n  const errRef = useRef();\n  const [user, setUser] = useState(''); /*user input*/\n  const [validName, setValidName] = useState(false); /*after test*/\n  const [userFocus, setUserFocus] = useState(false); //focus user part\n\n  const [pass, setPass] = useState('');\n  const [validPass, setValidPass] = useState(false);\n  const [passFocus, setPassFocus] = useState(false);\n  const [matchPass, setMatchPass] = useState('');\n  const [validMatch, setValidMatch] = useState(false);\n  const [matchFocus, setMatchFocus] = useState(false);\n  const [errMsg, setErrMsg] = useState('');\n  const [success, setSuccess] = useState(false);\n\n  /*focus when component load*/\n  useEffect(() => {\n    userRef.current.focus();\n  }, []);\n\n  /*to validate user*/\n  useEffect(() => {\n    setValidName(user_regex.test(user));\n  }, [user]);\n\n  /*to validate password*/\n  useEffect(() => {\n    setValidPass(pass_regex.test(pass));\n    setValidMatch(pass === matchPass);\n  }, [pass, matchPass]); //sync\n\n  /*Error Message*/\n  useEffect(() => {\n    setErrMsg('');\n  }, [user, pass, matchPass]); /*once user change one of the info, error meaasge come out*/\n\n  //submit the form==============================\n  const handleSubmit = async e => {\n    e.preventDefault(); // to prevent hack by default submit form\n    //to prevent subimit button can be pressed\n    const v1 = user_regex.test(user);\n    const v2 = pass_regex.test(pass);\n    if (!v1 || !v2) {\n      setErrMsg(\"Invalid Entry\");\n      return;\n    }\n    try {\n      const response = await axios.post(REGISTER_URL, JSON.stringify({\n        user,\n        pass\n      }), {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        withCredentials: true\n      });\n      console.log(response === null || response === void 0 ? void 0 : response.data); //respone from server\n      console.log(response === null || response === void 0 ? void 0 : response.accessToken);\n      console.log(JSON.stringify(response));\n      setSuccess(true);\n      //clear state and controlled inputs\n      //need value attrib on inputs for this\n      setUser('');\n      setPass('');\n      setMatchPass('');\n    } catch (err) {\n      var _err$response;\n      if (!(err !== null && err !== void 0 && err.response)) {\n        setErrMsg('No Server Response');\n      } else if (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) === 409) {\n        //conflict between the requested resources and the current state of the server \n        setErrMsg('Username Taken');\n      } else {\n        setErrMsg('Registration Failed');\n      }\n      errRef.current.focus(); //focus err screen reader \n    }\n  };\n\n  /*============================================================ */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"loginregis\",\n    children: success ? /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Success!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#\",\n          children: \"Sign In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"lgsec\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        ref: errRef,\n        className: errMsg ? \"errmsg\" : \"offscreen\",\n        \"aria-live\": \"assertive\",\n        children: errMsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"regis\",\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"username\",\n          children: [\"Username:\", /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faCheck,\n            className: validName ? \"valid\" : \"hide\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faTimes,\n            className: validName || !user ? \"hide\" : \"invalid\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"username\",\n          ref: userRef /*focus input*/,\n          autoComplete: \"off\" /*didnt display previous input value*/,\n          onChange: e => setUser(e.target.value) /*user state*/,\n          value: user,\n          required: true /*to specify input must be filled out before submitting*/,\n          \"aria-invalid\": validName ? \"false\" : \"true\" /*to determine valid input before submit\r\n                                                       dont have validname, if have validn name will return true*/,\n          \"aria-describedby\": \"uidnote\" /*provide additional information read by screen readers, used to read what type and ariainvalid*/,\n          onFocus: () => setUserFocus(true),\n          onBlur: () => setUserFocus(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"uidnote\",\n          className: userFocus && user && !validName ? \"instructions\" : \"offscreen\",\n          children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faInfoCircle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 29\n          }, this), \"4 to 24 characters.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 48\n          }, this), \"Must begin with a letter.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 54\n          }, this), \"Letters, numbers, underscores, hyphens allowed.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: [\"Password:\", /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faCheck,\n            className: validPass ? \"valid\" : \"hide\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faTimes,\n            className: validPass || !pass ? \"hide\" : \"invalid\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          onChange: e => setPass(e.target.value),\n          value: pass,\n          required: true,\n          \"aria-invalid\": validPass ? \"false\" : \"true\",\n          \"aria-describedby\": \"passnote\",\n          onFocus: () => setPassFocus(true),\n          onBlur: () => setPassFocus(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"passdnote\",\n          className: passFocus && !validPass ? \"instructions\" : \"offscreen\",\n          children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faInfoCircle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 29\n          }, this), \"8 to 24 characters.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 48\n          }, this), \"Must include uppercase and lowercase letters, a number and a special character.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 108\n          }, this), \"Allowed special characters: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            \"aria-label\": \"exclamation mark\",\n            children: \"!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 57\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            \"aria-label\": \"at symbol\",\n            children: \"@\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 102\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            \"aria-label\": \"hashtag\",\n            children: \"#\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 140\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            \"aria-label\": \"dollar sign\",\n            children: \"$\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 176\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            \"aria-label\": \"percent\",\n            children: \"%\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 216\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"confirm_pass\",\n          children: [\"Confirm Password:\", /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faCheck,\n            className: validMatch && matchPass ? \"valid\" : \"hide\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faTimes,\n            className: validMatch || !matchPass ? \"hide\" : \"invalid\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"confirm_pass\",\n          onChange: e => setMatchPass(e.target.value),\n          value: matchPass,\n          required: true,\n          \"aria-invalid\": validMatch ? \"false\" : \"true\",\n          \"aria-describedby\": \"confirmnote\",\n          onFocus: () => setMatchFocus(true),\n          onBlur: () => setMatchFocus(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"confirmnote\",\n          className: matchFocus && !validMatch ? \"instructions\" : \"offscreen\",\n          children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faInfoCircle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 29\n          }, this), \"Must match the first password input field.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: !validName || !validPass || !validMatch ? true : false,\n          children: \"Sign Up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"remind\",\n        children: [\"Already have an account?\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 49\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"line\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/\",\n            children: \"Sign In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n};\n_s(Register, \"mw9ftZF5hjoA7wTO33dENMR0uH0=\");\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["useRef","useState","useEffect","faCheck","faTimes","faInfoCircle","FontAwesomeIcon","axios","Link","jsxDEV","_jsxDEV","user_regex","pass_regex","REGISTER_URL","Register","_s","userRef","errRef","user","setUser","validName","setValidName","userFocus","setUserFocus","pass","setPass","validPass","setValidPass","passFocus","setPassFocus","matchPass","setMatchPass","validMatch","setValidMatch","matchFocus","setMatchFocus","errMsg","setErrMsg","success","setSuccess","current","focus","test","handleSubmit","e","preventDefault","v1","v2","response","post","JSON","stringify","headers","withCredentials","console","log","data","accessToken","err","_err$response","status","id","children","fileName","_jsxFileName","lineNumber","columnNumber","href","ref","className","onSubmit","htmlFor","icon","type","autoComplete","onChange","target","value","required","onFocus","onBlur","disabled","to","_c","$RefreshReg$"],"sources":["C:/Users/Daniel/Desktop/noteSystemManagement/frontend/src/components/Register.js"],"sourcesContent":["import { useRef, useState, useEffect} from \"react\";\r\nimport { faCheck, faTimes, faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport axios from '../api/axios'; // Import the Axios instance with the correct base URL\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\n\r\nconst user_regex = /^[A-z][A-z0-9-_]{3,23}$/;\r\n/*[a-zA-Z] - This character class represents a single character that can be any uppercase or lowercase letter of the English alphabet.\r\n[a-zA-Z0-9-] - This character class represents a single character that can be an uppercase or lowercase letter of the English alphabet, a digit (0-9), an underscore (), or a hyphen (-).\r\n\r\nString that starts with a single letter (uppercase or lowercase), followed by a single character that can be a letter (uppercase or lowercase), a digit, an underscore, or a hyphen. The total length of the string should be between 4 and 24 characters.*/\r\n\r\nconst pass_regex= /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\r\n/*?= is a positive lookahead, a type of zero-width assertion. captured match must be followed by whatever is within the parentheses but that part isn't captured.\r\n\r\n(?=.*[a-z]) - It ensures that the string contains at least one lowercase letter (a-z).\r\n\r\n(?=.*[A-Z]) - It ensures that the string contains at least one uppercase letter (A-Z).\r\n\r\n(?=.*[0-9]) -Ensures that the string contains at least one digit (0-9).\r\n\r\n(?=.*[!@#$%]) -Ensures that the string contains at least one special character from the set [!@#$%].*/\r\n\r\nconst REGISTER_URL = 'http://localhost:5000/register';\r\n//end point backend api\r\n\r\n\r\nconst Register = () => {\r\n    const userRef = useRef(); /*focus user input*/\r\n    const errRef = useRef();\r\n\r\n    const [user, setUser] = useState(''); /*user input*/\r\n    const [validName, setValidName] = useState(false); /*after test*/\r\n    const [userFocus, setUserFocus] = useState(false); //focus user part\r\n\r\n    const [pass, setPass] = useState('');\r\n    const [validPass, setValidPass] = useState(false);\r\n    const [passFocus, setPassFocus] = useState(false);\r\n\r\n    const [matchPass, setMatchPass] = useState('');\r\n    const [validMatch, setValidMatch] = useState(false);\r\n    const [matchFocus, setMatchFocus] = useState(false);\r\n\r\n    const [errMsg, setErrMsg] = useState('');\r\n    const [success, setSuccess] = useState(false);\r\n\r\n    /*focus when component load*/\r\n    useEffect(() => {\r\n        userRef.current.focus();\r\n    }, [])\r\n\r\n    /*to validate user*/\r\n    useEffect(() => {\r\n        setValidName(user_regex.test(user));\r\n    }, [user])\r\n\r\n    /*to validate password*/\r\n    useEffect(() => {\r\n        setValidPass(pass_regex.test(pass));\r\n        setValidMatch(pass === matchPass);\r\n    }, [pass, matchPass]) //sync\r\n\r\n    /*Error Message*/\r\n    useEffect(() => {\r\n        setErrMsg('');\r\n    }, [user, pass, matchPass]) /*once user change one of the info, error meaasge come out*/\r\n\r\n\r\n    \r\n    //submit the form==============================\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();// to prevent hack by default submit form\r\n        //to prevent subimit button can be pressed\r\n        const v1 = user_regex.test(user);\r\n        const v2 = pass_regex.test(pass);\r\n        if (!v1 || !v2) {\r\n            setErrMsg(\"Invalid Entry\");\r\n            return;\r\n        }\r\n        try {\r\n            const response = await axios.post(REGISTER_URL,\r\n                JSON.stringify({ user, pass }),\r\n                {\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    withCredentials: true\r\n                }\r\n            );\r\n            console.log(response?.data); //respone from server\r\n            console.log(response?.accessToken);\r\n            console.log(JSON.stringify(response))\r\n            setSuccess(true);\r\n            //clear state and controlled inputs\r\n            //need value attrib on inputs for this\r\n            setUser('');\r\n            setPass('');\r\n            setMatchPass('');\r\n        } catch (err) {\r\n            if (!err?.response) {\r\n                setErrMsg('No Server Response');\r\n            } else if (err.response?.status === 409) {\r\n                //conflict between the requested resources and the current state of the server \r\n                setErrMsg('Username Taken');\r\n            } else {\r\n                setErrMsg('Registration Failed')\r\n            }\r\n            errRef.current.focus(); //focus err screen reader \r\n        }\r\n    }\r\n\r\n\r\n/*============================================================ */\r\n    return (\r\n        <div id=\"loginregis\">\r\n        {/*if have a acc, if not register*/}\r\n            {success ? (\r\n                <section>\r\n                    <h1>Success!</h1>\r\n                    <p>\r\n                        <a href=\"#\">Sign In</a>\r\n                    </p>\r\n                </section>\r\n            ) : (\r\n                <section id=\"lgsec\">\r\n                    <p ref={errRef} className={errMsg ? \"errmsg\" : \"offscreen\"} aria-live=\"assertive\">{errMsg}</p> {/*content within that element should be announced to screen readers immediately and interrupt any ongoing speech*/}\r\n                    <h1 className=\"regis\">Register</h1>\r\n                    <form onSubmit = {handleSubmit}>\r\n{/*====================user field===========================*/}\r\n                        <label htmlFor=\"username\">\r\n                            Username:\r\n                             {/*to check if not valid, hide the green mark, should be true after test the user regex, display green mark*/} \r\n                            <FontAwesomeIcon icon={faCheck}\r\n                            className={validName ? \"valid\" : \"hide\"} />\r\n                             {/*by default is false, if valid true hide red mark, or user state empty, if it is not empty, hide red mark*/}\r\n                            <FontAwesomeIcon icon={faTimes} className={validName || !user ? \"hide\" : \"invalid\"} />\r\n                        </label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"username\"\r\n                            ref={userRef}/*focus input*/\r\n                            autoComplete=\"off\"/*didnt display previous input value*/\r\n                            onChange={(e) => setUser(e.target.value)}/*user state*/\r\n                            value={user}\r\n                            required/*to specify input must be filled out before submitting*/\r\n                            aria-invalid={validName ? \"false\" : \"true\"}/*to determine valid input before submit\r\n                            dont have validname, if have validn name will return true*/\r\n                            aria-describedby=\"uidnote\"/*provide additional information read by screen readers, used to read what type and ariainvalid*/\r\n                            onFocus={() => setUserFocus(true)}\r\n                            onBlur={() => setUserFocus(false)}\r\n                        />\r\n                        {/*aria described by set requirement*/}\r\n                        {/*if userfocus true, user state exist not  empty, not a valid name*/}\r\n\r\n                        {/*display condition let user know how to set username*/}\r\n                        <p id=\"uidnote\" className={userFocus && user && !validName ? \"instructions\" : \"offscreen\"}>\r\n                            <FontAwesomeIcon icon={faInfoCircle} />\r\n                            4 to 24 characters.<br />\r\n                            Must begin with a letter.<br />\r\n                            Letters, numbers, underscores, hyphens allowed.\r\n                        </p>\r\n\r\n{/*====================password field=================*/}\r\n                        <label htmlFor=\"password\">\r\n                            Password:\r\n                             {/*if pass valid value is false, hide green check mark; if true valid green mark*/}\r\n                            <FontAwesomeIcon icon={faCheck} className={validPass ? \"valid\" : \"hide\"} />\r\n                            {/*if validpass false or pass is empty, invalid red mark */}\r\n                            <FontAwesomeIcon icon={faTimes} className={validPass || !pass ? \"hide\" : \"invalid\"} />\r\n                        </label>\r\n                        <input\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            onChange={(e) => setPass(e.target.value)}\r\n                            value={pass}\r\n                            required\r\n                            aria-invalid={validPass ? \"false\" : \"true\"}\r\n                            aria-describedby=\"passnote\"\r\n                            onFocus={() => setPassFocus(true)}\r\n                            onBlur={() => setPassFocus(false)}\r\n                        />\r\n                        {/*if focus on pass field and not valid pass */}\r\n                        <p id=\"passdnote\" className={passFocus && !validPass ? \"instructions\" : \"offscreen\"}>\r\n                        \r\n                            <FontAwesomeIcon icon={faInfoCircle} />\r\n                            8 to 24 characters.<br />\r\n                            Must include uppercase and lowercase letters, a number and a special character.<br />\r\n                            Allowed special characters: <span aria-label=\"exclamation mark\">!</span> <span aria-label=\"at symbol\">@</span> <span aria-label=\"hashtag\">#</span> <span aria-label=\"dollar sign\">$</span> <span aria-label=\"percent\">%</span>\r\n                        </p>\r\n\r\n{/*====================confirm pass==================*/}\r\n                        <label htmlFor=\"confirm_pass\">\r\n                            Confirm Password:\r\n                            {/*if valid match value is false where matchpass not same as pass and matchPass should have input , hide green mark; else the valid match value become true will display green mark*/}\r\n                            <FontAwesomeIcon icon={faCheck} className={validMatch && matchPass ? \"valid\" : \"hide\"} />\r\n\r\n                            {/*if valid match value is false or matchpass is blank , invalid */}\r\n                            <FontAwesomeIcon icon={faTimes} className={validMatch || !matchPass ? \"hide\" : \"invalid\"} />\r\n                        </label>\r\n                        <input\r\n                            type=\"password\"\r\n                            id=\"confirm_pass\"\r\n                            onChange={(e) => setMatchPass(e.target.value)}\r\n                            value={matchPass}\r\n                            required\r\n                            aria-invalid={validMatch ? \"false\" : \"true\"}\r\n                            aria-describedby=\"confirmnote\"\r\n                            onFocus={() => setMatchFocus(true)}\r\n                            onBlur={() => setMatchFocus(false)}\r\n                        />\r\n                        <p id=\"confirmnote\" className={matchFocus && !validMatch ? \"instructions\" : \"offscreen\"}>\r\n                            <FontAwesomeIcon icon={faInfoCircle} />\r\n                            Must match the first password input field.\r\n                        </p>\r\n\r\n{/*===============Sign up button===================== */}\r\n                        {/*disable until all condition fulfill to prevents the button from being clicked\r\n                        one of this true then can click*/}\r\n                        <button disabled={!validName || !validPass || !validMatch ? true : false}>Sign Up</button>\r\n                    </form>\r\n                    <p id='remind'>\r\n                        Already have an account?<br />\r\n                        <span className=\"line\">\r\n                            <Link to=\"/\">Sign In</Link>\r\n                        </span>\r\n                    </p>\r\n                </section>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}